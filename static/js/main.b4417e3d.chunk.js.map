{"version":3,"sources":["Todo.js","TodoList.js","App.js","index.js"],"names":["todos","todos_fromTodoList","toggleTodo","action","type","checked","complete","onChange","id","style","wordWrap","name","TodoList","todos_state","map","each","LOCAL_STORAGE_KEY","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","textAlign","color","palette","text","secondary","App","useState","setTodos","todoNameRef","useRef","useEffect","stored_todos","JSON","parse","localStorage","getItem","setItem","stringify","classes","className","CssBaseline","Grid","container","direction","justify","alignItems","marginTop","item","Paper","minWidth","TextField","label","inputRef","Tooltip","title","Button","variant","onClick","button_event","current","value","prevTodos","uuidv4","disableElevation","currentTodo","filter","todo","xs","length","maxWidth","Divider","newTodos","find","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4417e3d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nexport default function todos({ todos_fromTodoList, toggleTodo }) {\r\n  function handleTodoClick() {\r\n    toggleTodo(todos_fromTodoList.id);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <form action=\"#\">\r\n        <p>\r\n          <label>\r\n            <input\r\n              type=\"checkbox\"\r\n              checked={todos_fromTodoList.complete}\r\n              onChange={handleTodoClick}\r\n            />\r\n            <div style={{ wordWrap: \"break-word\" }}>\r\n              {todos_fromTodoList.name}\r\n            </div>\r\n          </label>\r\n        </p>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nexport default function TodoList({ todos_state, toggleTodo }) {\r\n  return todos_state.map((each) => {\r\n    return (\r\n      <Todo key={each.id} todos_fromTodoList={each} toggleTodo={toggleTodo} />\r\n    );\r\n  });\r\n}\r\n","import React, { useState, useRef, useEffect } from \"react\";\nimport TodoList from \"./TodoList\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"./todoList.css\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport {\n  Button,\n  Grid,\n  Paper,\n  makeStyles,\n  Tooltip,\n  Divider,\n  TextField,\n  Typography,\n} from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\nconst LOCAL_STORAGE_KEY = \"todoApp.todos\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n}));\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const todoNameRef = useRef();\n\n  useEffect(() => {\n    const stored_todos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)); // we need to turn it from string to array, so use JSON parse.\n    if (stored_todos) {\n      setTodos(stored_todos);\n    }\n  }, []); // this second arugment the dependency, this empty array will run only once when we first load the page(i think)\n\n  useEffect(() => {\n    // useEffect is for when we want to make state sticky, so the value wont disappear when we press Refresh. and it should be the first function to be called. (1) this first one is for storage, we need another UseEffect to load it on our page!\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos)); // JSON turn the value into string\n  }, [todos]); // this second argument determine that useEffect will run everytime something inside todos changed\n\n  function toggleTodo(id) {\n    const newTodos = [...todos]; // we make a copy of todos instead of modifying it firectly\n    const todo = newTodos.find((todo) => todo.id === id);\n    todo.complete = !todo.complete;\n    setTodos(newTodos);\n  }\n\n  function handleAddToDo(button_event) {\n    const name = todoNameRef.current.value; // this is whatever value that are in the text input right now, and will be sent to us when they press the button\n    if (name === \"\") {\n      return \"\";\n    }\n\n    setTodos((prevTodos) => {\n      return [...prevTodos, { id: uuidv4(), name: name, complete: false }];\n    });\n    todoNameRef.current.value = null;\n  }\n\n  function handleClearTodo() {\n    //clear completed todos\n    const currentTodo = todos.filter((todo) => todo.complete === false); //!todo.complete is todo that has complete value of false\n    setTodos(currentTodo);\n  }\n\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root} id=\"wrapper\">\n      <CssBaseline />\n      <Grid\n        container\n        direction=\"column\"\n        justify=\"center\"\n        alignItems=\"center\"\n        spacing={3}\n        style={{ marginTop: \"5rem\" }}\n      >\n        <Grid item>\n          <Paper\n            className={classes.paper}\n            style={{ textAlign: \"center\", minWidth: \"17vw\" }}\n          >\n            <Grid item style={{ textAlign: \"center\" }}>\n              <TextField\n                id=\"standard-basic\"\n                label=\"Enter tasks!\"\n                inputRef={todoNameRef}\n                id=\"input-text\"\n                type=\"text\"\n              />\n              {/* <input ref={todoNameRef} type=\"text\" id=\"input-text\" /> */}\n            </Grid>\n            <Grid item>\n              <Tooltip title=\"Add task\">\n                <Button\n                  variant=\"outlined\"\n                  color=\"secondary\"\n                  onClick={handleAddToDo}\n                  disableElevation\n                >\n                  <AddIcon />\n                </Button>\n              </Tooltip>\n              <Tooltip title=\"Clear completed task\">\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onClick={handleClearTodo}\n                  disableElevation\n                >\n                  <DeleteIcon />\n                </Button>\n              </Tooltip>\n            </Grid>\n            <Grid item xs={12} style={{ textAlign: \"center\" }}>\n              <div>\n                {todos.filter((each) => each.complete !== true).length} left to\n                do!\n              </div>\n            </Grid>\n          </Paper>\n        </Grid>\n        <Grid item style={{ textAlign: \"left\" }}>\n          <Paper\n            className={classes.paper}\n            style={{ minWidth: \"17vw\", maxWidth: \"80vw\" }}\n          >\n            What to do!\n            <Divider />\n            <TodoList todos_state={todos} toggleTodo={toggleTodo} />\n          </Paper>\n        </Grid>\n      </Grid>\n    </div> // this </> is called fragment\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}